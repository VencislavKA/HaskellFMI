1 - Правилната структура на mod е mod x y, понеже функцията е префиксна.
2 - Използваме infix-но функцията, когато това улеснява четимостта на кода
3 - $ е специален символ използван за обграждане в скоби всичко след него да края на реда или до затваряща скоба
4 - $ четем като "след"
5 - $ трябва да изпозлваме понеже, за да спазваме изискванията на езика трябва да използваме минимално скоби
6 - една функция е написана на функционално ниво, когато в не са използвани цикли а рекурсия
7 - правим всички цикли на рекурсия, променливите се преобразуват във функции, също така избягваме проверките и използваме guards на тяхно място
8 - проверки в Haskell 
9 - guards
10 - pattern mathing
11 - if else if
12 - функция извикваща в тялото си отново себе си, когато бъдат извършени всички действия се достига така нареченото дъно/дъна, което прекратява функцията
13 - извършва се постъпково и може да се преброй лесно колко пъти сме минали през конкретен код
14 - да
15 - когато не искаме да конкретизираме и не искаме да даваме име на променливата понеже няма да я използваме, може да бъде заместена с всичко
16 - pattern mathing е задаване на конкретни стойности на конкретни променливи 
17 - div, \, *
18 - понеже функцията сама приема всички стойности подадени след това като параметри ако параметрите са повече взима колкото и трявбат, ако са по малко хвърля грешка
19 - понеже са неясни именувания на променливи и понеже са запазени символи
20 - използваме максималко вградените функции